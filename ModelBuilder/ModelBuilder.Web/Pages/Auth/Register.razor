@layout NoAuthLayout
@using ModelBuilder.Tools
@inject NavigationManager NavMgr
@page "/auth/register"
@inject ISnackbar Snackbar
@inject IToastService toastService
@if (RegisterSuccess)
{
    <MudPaper Class="pa-4 mud-height-full">
        <MudText Color="@Color.Success" Typo="Typo.body1">Akun berhasil dibuat, silakan <a href="/auth/login">Masuk</a>.</MudText>
    </MudPaper>
}
else
{

    <MudGrid>
        <MudItem xs="12">
            <MudText Align="Align.Center" Typo="Typo.h6">Daftar User</MudText>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Nama Lengkap" HelperText="Nama Anda"
                              @bind-Value="DataUser.FullName" For="@(() => DataUser.FullName)" />

                    <MudTextField Label="No HP" HelperText="telepon Anda" Class="mt-3"
                              @bind-Value="DataUser.Phone" For="@(() => DataUser.Phone)" InputType="InputType.Telephone" />

                    <MudTextField Label="Email" HelperText="Email Anda" Class="mt-3"
                              @bind-Value="DataUser.Username" For="@(() => DataUser.Username)" InputType="InputType.Email" />


                    <MudTextField Label="Alamat" HelperText="Alamat Anda" Class="mt-3"
                              @bind-Value="DataUser.Alamat" For="@(() => DataUser.Alamat)" InputType="InputType.Text" />

                    <MudTextField Label="Password" HelperText="Password Anda" Class="mt-3"
                              @bind-Value="DataUser.Password" For="@(() => DataUser.Password)" InputType="InputType.Password" />

                    <MudTextField Label="Ulang Password" HelperText="Ulang Password Anda" Class="mt-3"
                              @bind-Value="RetypePass" For="@(() => RetypePass)" InputType="InputType.Password" />

                    <div class="d-flex">
                        <MudImage Src="@CaptchaImage" style="text-align:center;margin-bottom:5px;" />
                    </div>
                    <div class="d-flex">
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Info" @onclick="GenerateCaptcha">Ganti</MudButton>
                    </div>

                    <MudTextField Label="Ketik Captcha" HelperText="Ketik Captcha" Class="mt-3"
                              @bind-Value="TypedCaptcha" For="@(() => TypedCaptcha)" InputType="InputType.Text" />


                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Button" @onclick="DaftarUser" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Daftar</MudButton>
                    <MudButton ButtonType="ButtonType.Button" @onclick="Kembali" Variant="Variant.Filled" Color="Color.Secondary">Kembali Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

    </MudGrid>

}

@code {
    public string CaptchaImage { get; set; }
    public string Answer { get; set; }
    public string TypedCaptcha { get; set; }

    UserProfile DataUser = new UserProfile();
    string RetypePass;
    string ErrorMsg = string.Empty;
    bool RegisterSuccess = false;

    void GenerateCaptcha()
    {
        Random oRandom = new Random();
        int iNumber = oRandom.Next(1000, 9999);
        Answer = iNumber.ToString();
        var temp = CaptchaGenerator.GetCaptcha(Answer, 158, 70);
        string base64String = Convert.ToBase64String(temp, 0, temp.Length);
        CaptchaImage = "data:image/png;base64," + base64String;
    }
    async Task Kembali()
    {
        NavMgr.NavigateTo("/auth/login");
    }
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CaptchaImage))
            GenerateCaptcha();
    }
    async Task DaftarUser()
    {
        ErrorMsg = "";
        UserProfileService svc = new UserProfileService();
        if (string.IsNullOrEmpty(TypedCaptcha))
        {
            ErrorMsg += "Tolong isi Captcha. ";
        }
        if (Answer != TypedCaptcha)
        {
            ErrorMsg += "Captcha tidak valid. ";
        }
        if (string.IsNullOrEmpty(DataUser.Username))
        {
            ErrorMsg += "Tolong di isi email. ";

        }
        if (string.IsNullOrEmpty(DataUser.Password))
        {
            ErrorMsg += "Tolong di isi password. ";

        }
        if (string.IsNullOrEmpty(DataUser.Phone))
        {
            ErrorMsg += "Tolong di isi no hp. ";

        }
        if (string.IsNullOrEmpty(DataUser.FullName))
        {
            ErrorMsg += "Tolong di isi nama lengkap. ";

        }
        if (string.IsNullOrEmpty(DataUser.Alamat))
        {
            ErrorMsg += "Tolong di isi alamat. ";

        }
        if (DataUser.Password != RetypePass)
        {
            ErrorMsg += "Password tidak sesuai dengan ulang password. ";

        }
        if (svc.IsUserExists(DataUser.Username))
        {
            ErrorMsg += "User sudah terdaftar sebelumnya, gunakan email lain. ";

        }

        if (ErrorMsg.Length > 0)
        {
            Snackbar.Add(ErrorMsg, Severity.Error);
            //toastService.ShowWarning(ErrorMsg, "Perhatian");
            return;
        }
        var enc = new Encryption();
        DataUser.Email = DataUser.Username;
        DataUser.Role = Roles.User;
        DataUser.Password = enc.Encrypt(DataUser.Password);
        if (svc.InsertData(DataUser))
        {
            var msg = "Anda telah terdaftar di Model Builder, Thanks";
            await SmsService.SendSms(msg, DataUser.Phone);
            await MailService.PostmarkSendEmail("Telah Teregister di Model Builder", msg, DataUser.Email);
            RegisterSuccess = true;
            StateHasChanged();
        }
    }
}
