@inject IJSRuntime jsRuntime
@using System.IO
@using ModelBuilder.Core.Builder
@using System.Text
@using Newtonsoft.Json
@inject IToastService toastService
@inject MLModelService service
@inject AzureBlobHelper blob;
@inject NavigationManager NavMgr

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            @CustomHeader
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="overflow-y:scroll;max-height:400px;">
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField T="string" Label="Api Url" HelperText="Api Url"
                                          @bind-Value="ApiUrl" />
                            <MudTextField  T="string" Label="Data Input (payload)" Lines="5" Variant="Variant.Outlined" @bind-Value="@PayloadSample" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Api"  />
                            @if (IsInferencing)
                            {
                                <MudPaper Class="pa-4 mt-4" Elevation="3">

                                    <MudText Typo="Typo.h6">Eksekusi Api Model in progress</MudText>
                                    <MudText Typo="Typo.body1">Harap menunggu...</MudText>
                                    <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                                </MudPaper>

                            }
                            @if (!string.IsNullOrEmpty(Result))
                            {
                                <MudText Typo="Typo.h6">Api Model Output</MudText>
                                <MudSpacer></MudSpacer>
                                <MudContainer Style="max-height: 200px; overflow-y: scroll">

                                    <MudText Style="white-space: pre-wrap;">@Result</MudText>

                                </MudContainer>

                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Disabled="@IsInferencing" ButtonType="ButtonType.Button" OnClick="Inference" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Call API</MudButton>
                            <MudButton Disabled="@IsInferencing" ButtonType="ButtonType.Button" OnClick="Cancel" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>


@code {
    bool IsInferencing = false;
    string PayloadSample;
    string ApiUrl;
    string Result;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public List<ModelParameter> ParamObj { set; get; }

    [Parameter]
    public string CustomHeader { get; set; }
    [Parameter]
    public MLModel TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }

    string[] Columns;
    string[] ColumnTypes;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(TaskObject.Kolom))
        {
            GenerateColumns();
            GeneratePayload();
            ApiUrl = $"{NavMgr.BaseUri}batch-inference"; 
        }
    }

    void GenerateColumns()
    {

        Columns = TaskObject.Kolom.Split(",");
        ColumnTypes = TaskObject.TipeKolom.Split(",");
        if (ParamObj == null)
        {
            ParamObj = new();
        }
        for (var i = 0; i < Columns.Length; i++)
        {

            var fieldName = ColumnHelper.GetFieldName(Columns[i]);
            object data = null;
            object dataOut = null;
            string OutTypes = "float[]";
            string InTypes = "string";
            switch (ColumnTypes[i])
            {
                case "System.String":
                    data = string.Empty;
                    OutTypes = "string";
                    InTypes = "string";
                    break;
                case "System.Boolean":
                    data = true;
                    OutTypes = "bool";
                    InTypes = "bool";
                    break;
                case "System.Single":
                    data = 0f;
                    OutTypes = "float";
                    InTypes = "float";
                    break;
                default:
                    data = string.Empty;
                    break;

            }
            if (Columns[i] == TaskObject.LabelName)
            {

                switch (TaskObject.Tipe)
                {
                    case "MultiClassification":
                    case "BinaryClassification":
                        OutTypes = "UInt32";


                        break;
                    default:
                        break;
                }

            }
            ParamObj.Add(new ModelParameter() { ColOutType = OutTypes, FieldName = fieldName, ColName = Columns[i], ColType = InTypes, ColData = string.Empty });
        }

    }
    private void OnValidSubmit(EditContext context)
    {

    }

    void GeneratePayload()
    {
        var item = new InferenceModelParam();
        item.ModelId = TaskObject.Id;
        item.Payload = new();
        var TableDataSet = ModelBuilder.Core.Helpers.DataConverter.ConvertCSVtoDataTable(TaskObject.DatasetPath,TaskObject.Separator.Trim()[0]);
        if (TableDataSet.Rows.Count < 1)
        {
            Snackbar.Add("Dataset kosong, tidak bisa membuat sample inferensi",Severity.Info);
        }
        else
        {
            for (var rowidx = 0; rowidx < 2; rowidx++)
            {
                var row = TableDataSet.Rows[rowidx];
                var dict = new Dictionary<string, object>();
                for (var i = 0; i < Columns.Length; i++)
                {
                    var fieldName = Columns[i];//ColumnHelper.GetFieldName(Columns[i]);
                    var data = row[fieldName];
                    dict.Add(fieldName, data);
                }
                item.Payload.Add(JsonConvert.SerializeObject(dict));
            }
            PayloadSample = Newtonsoft.Json.JsonConvert.SerializeObject(item,Formatting.Indented);
        }
    }
    HttpClient client;
    async Task Inference()
    {
        if (IsInferencing) return;
        IsInferencing = true;
        await Task.Delay(1);
        if (client == null) client = new HttpClient();
        var content = new StringContent(PayloadSample, Encoding.UTF8, "application/json");
        var res = await client.PostAsync(ApiUrl, content);
        if (res.IsSuccessStatusCode)
        {
            var result = await res.Content.ReadAsStringAsync();
            Result = result;
        }
        else
        {
            Result = "Error";
        }
        IsInferencing = false;
        Snackbar.Add($"Completed", Severity.Info);

    }
}