@inject IJSRuntime jsRuntime
@using System.IO
@using ModelBuilder.Core.Builder
@inject IToastService toastService
@inject MLModelService service
@inject AzureBlobHelper blob;

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            @CustomHeader
        </MudText>
    </TitleContent>
    <DialogContent>
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            
                          @foreach(var item in ParamObj){
                            
                            <MudTextField T="string" Label="@item.ColName" HelperText="@item.ColType"
                                          @bind-Value="@item.ColData"   />
                            }
                             @if (IsInferencing)
                                { 
                                    <MudPaper Class="pa-4 mt-4" Elevation="3">

                                        <MudText Typo="Typo.h6">Eksekusi Model in progress</MudText>
                                        <MudText Typo="Typo.body1">Harap menunggu...</MudText>
                                        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                                    </MudPaper>

                                }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Disabled="@IsInferencing" ButtonType="ButtonType.Button" OnClick="Inference" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Call API</MudButton>
                            <MudButton Disabled="@IsInferencing" ButtonType="ButtonType.Button" OnClick="Cancel" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

            </MudGrid>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>


@code {
    bool IsInferencing = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public List<ModelParameter> ParamObj { set; get; }

    [Parameter]
    public string CustomHeader { get; set; }
    [Parameter]
    public MLModel TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }

    string[] Columns;
    string[] ColumnTypes;
    Core.Builder.ModelInference.ModelInput InputData;
    Core.Builder.ModelInference.ModelOutput OutputData;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(TaskObject.Kolom))
        {
            GenerateColumns();
        }
    }

    void GenerateColumns()
    {
        InputData = new ModelInference.ModelInput();
        OutputData=new();

        Columns = TaskObject.Kolom.Split(",");
        ColumnTypes = TaskObject.TipeKolom.Split(",");
        if (ParamObj == null)
        {
            ParamObj = new();
        }
        for (var i = 0; i < Columns.Length; i++)
        {

            var fieldName = ColumnHelper.GetFieldName(Columns[i]);
            object data = null;
            object dataOut = null;
            string OutTypes = "float[]";
            string InTypes = "string";
            switch (ColumnTypes[i])
            {
                case "System.String":
                    data = string.Empty;
                    OutTypes = "string";
                    InTypes = "string";
                    break;
                case "System.Boolean":
                    data = true;
                    OutTypes = "bool";
                    InTypes = "bool";
                    break;
                case "System.Single":
                    data = 0f;
                    OutTypes = "float";
                    InTypes = "float";
                    break;
                default:
                    data = string.Empty;
                    break;

            }
            //InputData.AddField(fieldName, ColumnTypes[i], Columns[i], data);
            //OutputData.AddField(fieldName, OutTypes, Columns[i], data);
            ParamObj.Add(new ModelParameter() { ColOutType=OutTypes, FieldName = fieldName, ColName = Columns[i], ColType=InTypes, ColData = string.Empty });
        }

    }
    private void OnValidSubmit(EditContext context)
    {

    }
    async Task Inference()
    {
        if (IsInferencing) return;
        IsInferencing = true;
        await Task.Delay(1);
        ModelExecutor exec = new  ModelExecutor ();
        for(var i = 0; i < ParamObj.Count; i++)
        {
            if (string.IsNullOrEmpty(ParamObj[i].ColData))
            {
                if (ParamObj[i].ColType == "float")
                {
                    ParamObj[i].ColData = "0f";
                }
            }
        }
        var res = await exec.ExecuteCode(ParamObj, TaskObject.ModelPath);
        IsInferencing = false;
        //ModelInference inference = new  ();
        //var output = inference.Predict(TaskObject.ModelPath, InputData);
        //Snackbar.Add($"Hasil : {output.IsSucceed}", Severity.Info);

    }
}